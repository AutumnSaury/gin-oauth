package oauth

import (
	"errors"
	"time"
)

var (
	ErrTokenUsedBeforeIssued = errors.New("Token used before issued")
	ErrTokenUsedBeforeValid  = errors.New("Token is not valid yet")
	ErrTokenExpire           = errors.New("Token expired")
)

// TokenResponse is the authorization server response
type TokenResponse struct {
	Token        string            `json:"access_token"`
	RefreshToken string            `json:"refresh_token"`
	TokenType    string            `json:"token_type"` // bearer
	ExpiresIn    int64             `json:"expires_in"` // secs
	Properties   map[string]string `json:"properties"`
}

// Token structure generated by the authorization server
type Token struct {
	Audience   string            `json:"aud"`
	ExpiresAt  int64             `json:"exp"`
	Id         string            `json:"jti"`
	IssuedAt   int64             `json:"iat"`
	NotBefore  int64             `json:"nbf"`
	TokenType  string            `json:"type"` // "user" for user, "client" for client
	ForRefresh bool              `json:"for_refresh"`
	Scope      []string          `json:"scope"`
	Claims     map[string]string `json:"claims"`
}

func (t Token) Valid() error {
	now := time.Now().UTC()

	if now.After(time.Unix(t.ExpiresAt, 0).UTC()) {
		return ErrTokenExpire
	} else if now.Before(time.Unix(t.IssuedAt, 0).UTC()) {
		return ErrTokenUsedBeforeValid
	} else if now.Before(time.Unix(t.NotBefore, 0).UTC()) {
		return ErrTokenUsedBeforeValid
	} else {
		return nil
	}
}
